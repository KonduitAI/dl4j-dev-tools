opList {
  name: "bits_hamming_distance"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "bitwise_and"
}
opList {
  name: "bitwise_or"
}
opList {
  name: "bitwise_xor"
}
opList {
  name: "cyclic_rshift_bits"
}
opList {
  name: "cyclic_shift_bits"
}
opList {
  name: "rshift_bits"
}
opList {
  name: "shift_bits"
}
opList {
  name: "toggle_bits"
}
opList {
  name: "axpy"
  argDescriptor {
    name: "alpha"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "batched_gemm"
  argDescriptor {
    name: "ldA"
    argType: INT64
  }
  argDescriptor {
    name: "ldC"
    argType: INT64
  }
  argDescriptor {
    name: "K"
    argType: INT64
  }
  argDescriptor {
    name: "ldB"
    argType: INT64
  }
  argDescriptor {
    name: "transB"
    argType: INT64
  }
  argDescriptor {
    name: "batchSize"
    argType: INT64
  }
  argDescriptor {
    name: "M"
    argType: INT64
  }
  argDescriptor {
    name: "N"
    argType: INT64
  }
  argDescriptor {
    name: "transA"
    argType: INT64
  }
}
opList {
  name: "matmul"
  argDescriptor {
    name: "transZ"
    argType: INT64
  }
  argDescriptor {
    name: "transX"
    argType: INT64
  }
  argDescriptor {
    name: "transY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mMul"
  argDescriptor {
    name: "transZ"
    argType: INT64
  }
  argDescriptor {
    name: "transX"
    argType: INT64
  }
  argDescriptor {
    name: "transY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mmul"
  argDescriptor {
    name: "transZ"
    argType: INT64
  }
  argDescriptor {
    name: "transX"
    argType: INT64
  }
  argDescriptor {
    name: "transY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "gemm"
  argDescriptor {
    name: "transZ"
    argType: INT64
  }
  argDescriptor {
    name: "transX"
    argType: INT64
  }
  argDescriptor {
    name: "transY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "gemv"
  argDescriptor {
    name: "transZ"
    argType: INT64
  }
  argDescriptor {
    name: "transX"
    argType: INT64
  }
  argDescriptor {
    name: "transY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "dot"
  argDescriptor {
    name: "transZ"
    argType: INT64
  }
  argDescriptor {
    name: "transX"
    argType: INT64
  }
  argDescriptor {
    name: "transY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "matmul_bp"
  argDescriptor {
    name: "dldy"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dldx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "transZ"
    argType: INT64
  }
  argDescriptor {
    name: "transX"
    argType: INT64
  }
  argDescriptor {
    name: "transY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "eps"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tensormmul"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axes_0[e]"
    argType: INT64
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "axe1_size"
    argType: INT64
  }
  argDescriptor {
    name: "axe0_size"
    argType: INT64
  }
  argDescriptor {
    name: "axes_1[e]"
    argType: INT64
  }
}
opList {
  name: "tensordot"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axes_0[e]"
    argType: INT64
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "axe1_size"
    argType: INT64
  }
  argDescriptor {
    name: "axe0_size"
    argType: INT64
  }
  argDescriptor {
    name: "axes_1[e]"
    argType: INT64
  }
}
opList {
  name: "tensormmul_bp"
  argDescriptor {
    name: "A"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axe0Size"
    argType: INT64
  }
  argDescriptor {
    name: "B"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axes1[e]"
    argType: INT64
  }
  argDescriptor {
    name: "axe1Size"
    argType: INT64
  }
  argDescriptor {
    name: "dLdB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdC"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdA"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "axes0[e]"
    argType: INT64
  }
}
opList {
  name: "boolean_not"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "choose"
  argDescriptor {
    name: "result"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "mode"
    argType: INT64
  }
  argDescriptor {
    name: "numResults"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "eq_scalar"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "Equals"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "gte_scalar"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "GreaterOrEquals"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "greaterOrEquals"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "gt_scalar"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "is_non_decreasing"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "is_numeric_tensor"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "is_strictly_increasing"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "lte_scalar"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "LessOrEquals"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "lessorequals"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "lt_scalar"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "neq_scalar"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "NotEquals"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "notequals"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "select"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "cond"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "Where"
  argDescriptor {
    name: "condition"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "where_np"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "add"
}
opList {
  name: "add_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "assign"
}
opList {
  name: "set"
}
opList {
  name: "copy"
}
opList {
  name: "assign_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "tf_atan2"
}
opList {
  name: "boolean_and"
}
opList {
  name: "boolean_or"
}
opList {
  name: "boolean_xor"
}
opList {
  name: "divide"
}
opList {
  name: "Div"
}
opList {
  name: "divide_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "divide_no_nan"
}
opList {
  name: "Div"
}
opList {
  name: "equals"
}
opList {
  name: "equal"
}
opList {
  name: "floordiv"
}
opList {
  name: "floordiv_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "floormod"
}
opList {
  name: "floormod_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "greater"
}
opList {
  name: "greater_equal"
}
opList {
  name: "igamma"
}
opList {
  name: "igammac"
}
opList {
  name: "less"
}
opList {
  name: "less_equal"
}
opList {
  name: "maximum"
}
opList {
  name: "maximum_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "meshgrid"
}
opList {
  name: "minimum"
}
opList {
  name: "minimum_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mod"
}
opList {
  name: "mod_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "multiply"
}
opList {
  name: "Mul"
}
opList {
  name: "multiply_bp"
  argDescriptor {
    name: "dLdz"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdy"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "multiply_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "not_equals"
}
opList {
  name: "percentile"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "q"
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "Pow"
}
opList {
  name: "Pow_bp"
  argDescriptor {
    name: "dLdz"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdy"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "realdiv"
}
opList {
  name: "RealDiv"
}
opList {
  name: "realdiv_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reversedivide"
}
opList {
  name: "RDiv"
}
opList {
  name: "reversedivide_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reversemod"
}
opList {
  name: "reversemod_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reversesubtract"
}
opList {
  name: "RSub"
}
opList {
  name: "reversesubtract_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "squaredsubtract"
}
opList {
  name: "squareddifference"
}
opList {
  name: "squaredsubtract_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "subtract"
}
opList {
  name: "Sub"
}
opList {
  name: "sub"
}
opList {
  name: "subtract_bp"
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "truncatediv"
}
opList {
  name: "compat_sparse_to_dense"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "def"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "compat_string_split"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "delim"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "decode_bitmap"
  argDescriptor {
    name: "updates"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "encoded"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "encode_bitmap"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "threshold"
  }
  argDescriptor {
    name: "counter"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "encoded"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "encode_threshold"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "threshold"
  }
  argDescriptor {
    name: "updated"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "encoded"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "decode_threshold"
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "encoded"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "bitcast"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "newType"
    argType: INT64
  }
}
opList {
  name: "BitCast"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "newType"
    argType: INT64
  }
}
opList {
  name: "cast"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "Cast"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "to_double"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "to_float16"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "to_float32"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "to_int32"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "to_int64"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "to_uint32"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "to_uint64"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "Switch"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "condition"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "switch"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "condition"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "if"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "condition"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "While"
}
opList {
  name: "while"
}
opList {
  name: "Scope"
}
opList {
  name: "scope"
}
opList {
  name: "Conditional"
}
opList {
  name: "cond"
}
opList {
  name: "Return"
}
opList {
  name: "return"
}
opList {
  name: "broadcastgradientargs"
}
opList {
  name: "BroadcastGradientArgs"
}
opList {
  name: "adjust_contrast"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "adjust_contrast_v2"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "adjust_hue"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "adjust_saturation"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "crop_and_resize"
  argDescriptor {
    name: "boxes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "image"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "newImageSize"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "method"
    argType: INT64
  }
  argDescriptor {
    name: "boxIndexes"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "draw_bounding_boxes"
  argDescriptor {
    name: "boxes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "images"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "colors"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "extract_image_patches"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "ksizeRows"
    argType: INT64
  }
  argDescriptor {
    name: "krateCols"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "ksizeCols"
    argType: INT64
  }
  argDescriptor {
    name: "krateRows"
    argType: INT64
  }
  argDescriptor {
    name: "kstrideRows"
    argType: INT64
  }
  argDescriptor {
    name: "kstrideCols"
    argType: INT64
  }
  argDescriptor {
    name: "isSame"
    argType: INT64
  }
}
opList {
  name: "hsv_to_rgb"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "image_resize"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "image"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "size"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "method"
    argType: INT64
  }
}
opList {
  name: "resize_area"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "image"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "size"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "width"
    argType: INT64
  }
  argDescriptor {
    name: "height"
    argType: INT64
  }
}
opList {
  name: "resize_bicubic"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "image"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "size"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "resize_images"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "image"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "size"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "methodT"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "resize_bilinear"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "image"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "resize_nearest_neighbor"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "image"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rgb_to_grs"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "inRank);"
    argType: INT64
  }
  argDescriptor {
    name: "dimC"
    argType: INT64
  }
}
opList {
  name: "rgb_to_hsv"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rgb_to_yiq"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rgb_to_yuv"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "yiq_to_rgb"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "yuv_to_rgb"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "knn_mindistance"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "highest"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "lowest"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "betainc"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "BetaInc"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "betaInc"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cholesky"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cross"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "o"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "diag"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "MatrixDiag"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "diag_part"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "DiagPart"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "digamma"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "eye"
  argDescriptor {
    name: "*OUTPUT_VARIABLE(0));"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "lgamma"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "Log1p"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "log1p"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "lstsq"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "solve_ls"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "MatrixSolveLs"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "lu"
  argDescriptor {
    name: "p"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dtype"
    argType: INT64
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "matrix_diag_part"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "matrix_set_diag"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "diagonal"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "MatrixSetDiag"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "diagonal"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "matrix_band_part"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "minLowerT"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "minLower"
    argType: INT64
  }
  argDescriptor {
    name: "maxUpper"
    argType: INT64
  }
  argDescriptor {
    name: "maxUpperT"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "band_part"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "minLowerT"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "minLower"
    argType: INT64
  }
  argDescriptor {
    name: "maxUpper"
    argType: INT64
  }
  argDescriptor {
    name: "maxUpperT"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "matrix_determinant"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "log_matrix_determinant"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "logdet"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "matrix_diag"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "diagonal"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "matrix_inverse"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "moments"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "means"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "variances"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "axisVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "polygamma"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "n"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "polyGamma"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "n"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "PolyGamma"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "n"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "qr"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outputQ"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "outputR"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "solve"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "sqrtm"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sufficient_statistics"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shift"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "squares"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "axisVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sum"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dataCount"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "svd"
  argDescriptor {
    name: "fullUV"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "switchNum);"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "calcUV"
    argType: INT64
  }
  argDescriptor {
    name: "switchNum"
    argType: INT64
  }
}
opList {
  name: "trace"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tri"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "diag"
    argType: INT64
  }
}
opList {
  name: "triangular_solve"
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "triu"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "diag"
    argType: INT64
  }
}
opList {
  name: "triu_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "diag"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "zeta"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "q"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "Zeta"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "q"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "clone_list"
}
opList {
  name: "TensorArrayIdentityV3"
}
opList {
  name: "tensorarrayidentityv3"
}
opList {
  name: "create_list"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "expandable"
    argType: INT64
  }
  argDescriptor {
    name: "height"
    argType: INT64
  }
}
opList {
  name: "TensorArrayV3"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "expandable"
    argType: INT64
  }
  argDescriptor {
    name: "height"
    argType: INT64
  }
}
opList {
  name: "tensorarrayv3"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "expandable"
    argType: INT64
  }
  argDescriptor {
    name: "height"
    argType: INT64
  }
}
opList {
  name: "TensorArrayCreateV3"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "expandable"
    argType: INT64
  }
  argDescriptor {
    name: "height"
    argType: INT64
  }
}
opList {
  name: "tensorarraycreatev3"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "expandable"
    argType: INT64
  }
  argDescriptor {
    name: "height"
    argType: INT64
  }
}
opList {
  name: "gather_list"
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "TensorArrayGatherV3"
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tensorarraygatherv3"
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "pick_list"
  argDescriptor {
    name: "ia"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "read_list"
  argDescriptor {
    name: "vec"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "index"
    argType: INT64
  }
}
opList {
  name: "TensorArrayReadV3"
  argDescriptor {
    name: "vec"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "index"
    argType: INT64
  }
}
opList {
  name: "tensorarrayreadv3"
  argDescriptor {
    name: "vec"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "index"
    argType: INT64
  }
}
opList {
  name: "scatter_list"
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "array"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "TensorArrayScatterV3"
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "array"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tensorarrayscatterv3"
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "array"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "size_list"
}
opList {
  name: "TensorArraySizeV3"
}
opList {
  name: "tensorarraysizev3"
}
opList {
  name: "split_list"
  argDescriptor {
    name: "sizes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "array"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "TensorArraySplitV3"
  argDescriptor {
    name: "sizes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "array"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tensorarraysplitv3"
  argDescriptor {
    name: "sizes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "array"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "stack_list"
}
opList {
  name: "TensorArrayConcatV3"
}
opList {
  name: "tensorarrayconcatv3"
}
opList {
  name: "unstack_list"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "INT_ARG(0));"
    argType: INT64
  }
}
opList {
  name: "write_list"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idx"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "TensorArrayWriteV3"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idx"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tensorarraywritev3"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idx"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "absolute_difference_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "\t"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "absolute_difference_loss_grad"
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "\t"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "cosine_distance_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "\t"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cosine_distance_loss_grad"
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "hinge_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "hinge_loss_grad"
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "huber_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "delta"
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "huber_loss_grad"
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "delta"
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "l2_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "log_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "epsilon"
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "log_loss_grad"
  argDescriptor {
    name: "epsilon"
  }
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "log_poisson_loss"
  argDescriptor {
    name: "log_predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "computeFullLoss"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "log_poisson_loss_grad"
  argDescriptor {
    name: "log_predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "computeFullLoss"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "mean_pairwssqerr_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "mean_pairwssqerr_loss_grad"
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "\t"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mean_sqerr_loss"
  argDescriptor {
    name: "OUTPUT_VARIABLE(0);"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "INPUT_VARIABLE(1);"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "INPUT_VARIABLE(2);"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "mean_sqerr_loss_grad"
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "INPUT_VARIABLE(1);"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "INPUT_VARIABLE(2);"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "sigm_cross_entropy_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labelsSmoothing"
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sigm_cross_entropy_loss_grad"
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labelsSmoothing"
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "softmax_cross_entropy_loss"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labelsSmoothing"
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "softmax_cross_entropy_loss_grad"
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdw"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labelsSmoothing"
  }
  argDescriptor {
    name: "reductionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "softmax_cross_entropy_loss_with_logits"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "classesDim"
    argType: INT64
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "softmax_cross_entropy_loss_with_logits_grad"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "classesDim"
    argType: INT64
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdl"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sparse_softmax_cross_entropy_loss_with_logits"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sparse_softmax_cross_entropy_loss_with_logits_grad"
  argDescriptor {
    name: "logits"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cbow"
  argDescriptor {
    name: "codes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "nsRounds"
    argType: INT64
  }
  argDescriptor {
    name: "randomValue"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numLabels"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "syn1neg"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "inferenceVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "target"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "ngStarter"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "alpha"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "context"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "negTable"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numWorkers"
    argType: INT64
  }
  argDescriptor {
    name: "syn0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "syn1"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "expTable"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "lockedWords"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "skipgram"
  argDescriptor {
    name: "codes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "nsRounds"
    argType: INT64
  }
  argDescriptor {
    name: "randomValue"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "syn1neg"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "inferenceVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "target"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "ngStarter"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "alpha"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "negTable"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numWorkers"
    argType: INT64
  }
  argDescriptor {
    name: "syn0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "syn1"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "expTable"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "crelu"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "crelu_bp"
  argDescriptor {
    name: "epsilon"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "epsilonNext"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cube"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cube_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "elu"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "elu_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "hardsigmoid"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "hardsigmoid_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "hardtanh"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "hardtanh_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "identity"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "linear"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "identity_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "LinearGrad"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "identity_n"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "lrelu"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "lrelu_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "prelu"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "alpha"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "prelu_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "alpha"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdA"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdO"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rationaltanh"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rationaltanh_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "rectifiedtanh"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rectifiedtanh_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "relu"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "relu_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "ReluGrad"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "relu6"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "relu6_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "selu"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "selu_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "sigmoid"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sigmoid_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "softplus"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "softplus_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "SoftplusGrad"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "softsign"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "softsign_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "SoftsignGrad"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "tanh"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tanh_bp"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "TanhGrad"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "thresholdedrelu"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "thresholdedrelu_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdO"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "apply_sgd"
  argDescriptor {
    name: "gradients"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "tarr"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "parameters"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ApplyGradientDescent"
  argDescriptor {
    name: "gradients"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "tarr"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "parameters"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "batchnorm"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "epsilon"
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axes.push_back(INT_ARG(i));"
    argType: INT64
  }
  argDescriptor {
    name: "variance"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mean"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "applyOffset"
    argType: INT64
  }
  argDescriptor {
    name: "!\");"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gamma"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "beta"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "applyScale"
    argType: INT64
  }
}
opList {
  name: "batchnorm_bp"
  argDescriptor {
    name: "axes.push_back(INT_ARG(i));"
    argType: INT64
  }
  argDescriptor {
    name: "dLdI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdG"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "applyOffset"
    argType: INT64
  }
  argDescriptor {
    name: "dLdB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "epsilon"
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdV"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "variance"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mean"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "!\");"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gamma"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "beta"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdM"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "applyScale"
    argType: INT64
  }
}
opList {
  name: "biasadd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "bias_add"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "biasadd_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "BiasAddGrad"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "col2im"
  argDescriptor {
    name: "imgWidth"
    argType: INT64
  }
  argDescriptor {
    name: "dX"
    argType: INT64
  }
  argDescriptor {
    name: "padHeight"
    argType: INT64
  }
  argDescriptor {
    name: "dY"
    argType: INT64
  }
  argDescriptor {
    name: "strideY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "strideX"
    argType: INT64
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "imgHeight"
    argType: INT64
  }
  argDescriptor {
    name: "padWidth"
    argType: INT64
  }
}
opList {
  name: "conv1d"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "paddingMode"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "isNCW"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
}
opList {
  name: "conv1d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "isNCW"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "paddingMode"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "conv2d"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "conv2d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "conv2d_input_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "gradIShape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "conv3dnew"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "paddingMode"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "conv3dnew_bp"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "OUTPUT_VARIABLE(2))"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "paddingMode"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "deconv2d"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "deconv2d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "deconv2d_tf"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "gradIShape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "deconv3d"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "deconv3d_bp"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "depthwise_conv2d"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "depthwise_conv2d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "dilation2d"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isSameShape"
    argType: INT64
  }
  argDescriptor {
    name: "r"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "rates[cnt]"
    argType: INT64
  }
  argDescriptor {
    name: "s"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "strides[cnt]"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "im2col"
  argDescriptor {
    name: "dX"
    argType: INT64
  }
  argDescriptor {
    name: "padHeight"
    argType: INT64
  }
  argDescriptor {
    name: "dY"
    argType: INT64
  }
  argDescriptor {
    name: "strideY"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "strideX"
    argType: INT64
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "padWidth"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kernelWidth"
    argType: INT64
  }
  argDescriptor {
    name: "kernelHeight"
    argType: INT64
  }
}
opList {
  name: "im2col_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dX"
    argType: INT64
  }
  argDescriptor {
    name: "dY"
    argType: INT64
  }
  argDescriptor {
    name: "strideY"
    argType: INT64
  }
  argDescriptor {
    name: "gradAtOutput"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "strideX"
    argType: INT64
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kernelWidth"
    argType: INT64
  }
  argDescriptor {
    name: "kernelHeight"
    argType: INT64
  }
}
opList {
  name: "ismax"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "IsMax"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "pointwise_conv2d"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sconv2d"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "*input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "weightsPoint"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "4)"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "*output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
  argDescriptor {
    name: "*weightsDepth"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sconv2d_bp"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "wFormat"
    argType: INT64
  }
  argDescriptor {
    name: "*input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "weightsPoint"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "gradWP"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "*gradWD"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "*gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "{"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "*gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
  argDescriptor {
    name: "*weightsDepth"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "upsampling2d"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "factorH"
    argType: INT64
  }
  argDescriptor {
    name: "factorW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
}
opList {
  name: "upsampling"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "factorH"
    argType: INT64
  }
  argDescriptor {
    name: "factorW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
}
opList {
  name: "upsampling2d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
}
opList {
  name: "upsampling_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
}
opList {
  name: "upsampling3d"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "factorH"
    argType: INT64
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "factorW"
    argType: INT64
  }
  argDescriptor {
    name: "factorD"
    argType: INT64
  }
}
opList {
  name: "upsampling3d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "dot_product_attention"
  argDescriptor {
    name: "normalization"
    argType: INT64
  }
  argDescriptor {
    name: "keys"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outputWeights"
    argType: INT64
  }
  argDescriptor {
    name: "queries"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "dot_product_attention_bp"
  argDescriptor {
    name: "dLdk"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdv"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "normalization"
    argType: INT64
  }
  argDescriptor {
    name: "keys"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "eps"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdq"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "queries"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "embedding_lookup"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "partition_mode"
    argType: INT64
  }
  argDescriptor {
    name: "indeces"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "fused_batch_norm"
  argDescriptor {
    name: "isTraining"
    argType: INT64
  }
  argDescriptor {
    name: "offset"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "variance"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mean"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dataFormat"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "batchVar"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "scale"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "batchMean"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "layer_norm"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "gain"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "layer_norm_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "bias"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "eps"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "gain"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "log_softmax"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "log_softmax_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "lrn"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "depth"
    argType: INT64
  }
}
opList {
  name: "lrn_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "depth"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "local_response_normalization"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "depth"
    argType: INT64
  }
}
opList {
  name: "multi_head_dot_product_attention"
  argDescriptor {
    name: "Wk"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "normalization"
    argType: INT64
  }
  argDescriptor {
    name: "keys"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wo"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wq"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INT64
  }
  argDescriptor {
    name: "queries"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wv"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "multi_head_dot_product_attention_bp"
  argDescriptor {
    name: "dLdk"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "keys"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "eps"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "queries"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWo"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWq"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wk"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdv"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWk"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "normalization"
    argType: INT64
  }
  argDescriptor {
    name: "Wo"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wq"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdq"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWv"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wv"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "avgpool2d"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "AvgPool2D"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "AvgPool"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "avgpool"
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "avgpool2d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "avgpool3dnew"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "avgpool3dnew_bp"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "maxpool2d"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "MaxPool2D"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "MaxPool"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "maxpool"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "maxpool2d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "MaxPool2D_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "MaxPool_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "maxpool3dnew"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "maxpool3dnew_bp"
  argDescriptor {
    name: "dD"
    argType: INT64
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNCDHW"
    argType: INT64
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sD"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "pD"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "kD"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "max_pool_with_argmax"
  argDescriptor {
    name: "indices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "pnormpool2d"
  argDescriptor {
    name: "sX"
    argType: INT64
  }
  argDescriptor {
    name: "sY"
    argType: INT64
  }
  argDescriptor {
    name: "pX"
    argType: INT64
  }
  argDescriptor {
    name: "pY"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kX"
    argType: INT64
  }
  argDescriptor {
    name: "kY"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dX"
    argType: INT64
  }
  argDescriptor {
    name: "dY"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
}
opList {
  name: "PnormPool2D"
  argDescriptor {
    name: "sX"
    argType: INT64
  }
  argDescriptor {
    name: "sY"
    argType: INT64
  }
  argDescriptor {
    name: "pX"
    argType: INT64
  }
  argDescriptor {
    name: "pY"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kX"
    argType: INT64
  }
  argDescriptor {
    name: "kY"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dX"
    argType: INT64
  }
  argDescriptor {
    name: "dY"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
}
opList {
  name: "PnormPool"
  argDescriptor {
    name: "sX"
    argType: INT64
  }
  argDescriptor {
    name: "sY"
    argType: INT64
  }
  argDescriptor {
    name: "pX"
    argType: INT64
  }
  argDescriptor {
    name: "pY"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kX"
    argType: INT64
  }
  argDescriptor {
    name: "kY"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dX"
    argType: INT64
  }
  argDescriptor {
    name: "dY"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
}
opList {
  name: "pnormpool"
  argDescriptor {
    name: "sX"
    argType: INT64
  }
  argDescriptor {
    name: "sY"
    argType: INT64
  }
  argDescriptor {
    name: "pX"
    argType: INT64
  }
  argDescriptor {
    name: "pY"
    argType: INT64
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kX"
    argType: INT64
  }
  argDescriptor {
    name: "kY"
    argType: INT64
  }
  argDescriptor {
    name: "extraParam0"
    argType: INT64
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dX"
    argType: INT64
  }
  argDescriptor {
    name: "dY"
    argType: INT64
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
}
opList {
  name: "pnormpool2d_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sW"
    argType: INT64
  }
  argDescriptor {
    name: "dH"
    argType: INT64
  }
  argDescriptor {
    name: "pW"
    argType: INT64
  }
  argDescriptor {
    name: "eps"
  }
  argDescriptor {
    name: "isNCHW"
    argType: INT64
  }
  argDescriptor {
    name: "kW"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "pnorm"
    argType: INT64
  }
  argDescriptor {
    name: "dW"
    argType: INT64
  }
  argDescriptor {
    name: "sH"
    argType: INT64
  }
  argDescriptor {
    name: "pH"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "isSameMode"
    argType: INT64
  }
  argDescriptor {
    name: "kH"
    argType: INT64
  }
}
opList {
  name: "dynamic_bidirectional_rnn"
  argDescriptor {
    name: "timeMajor"
    argType: INT64
  }
  argDescriptor {
    name: "\t"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h0FW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "WhFW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "maxTimeStep"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h0BW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "WhBW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hBWFinal"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bFW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hFWFinal"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bBW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hFW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "WxFW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hBW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "WxBW"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "dynamic_rnn"
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "timeMajor"
    argType: INT64
  }
  argDescriptor {
    name: "2)"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "maxTimeStep"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hFinal"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "gru"
  argDescriptor {
    name: "hI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "gru_bp"
  argDescriptor {
    name: "hI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdhI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWh"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdb"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "gruCell"
  argDescriptor {
    name: "bc"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "r"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "hLast"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bru"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "u"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wru"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wc"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "gruCell_bp"
  argDescriptor {
    name: "hi"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "bc"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdb"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdc"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wc"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWc"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "W"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdu"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdr"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdhi"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdbc"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "lstm"
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "h0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wc"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "peephole"
    argType: INT64
  }
  argDescriptor {
    name: "Wh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "forgetBias"
  }
  argDescriptor {
    name: "clippingCellValue"
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wp"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "projection"
    argType: INT64
  }
  argDescriptor {
    name: "clippingProjValue"
  }
}
opList {
  name: "lstmBlock"
  argDescriptor {
    name: "yLast"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wco"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "f"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dataFormat"
    argType: INT64
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "i"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "maxTSLength"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "peephole"
    argType: INT64
  }
  argDescriptor {
    name: "cLast"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "o"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "forgetBias"
  }
  argDescriptor {
    name: "clippingCellValue"
  }
  argDescriptor {
    name: "W"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wcf"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wci"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "lstmBlockCell"
  argDescriptor {
    name: "yLast"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wco"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "f"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "i"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "peephole"
    argType: INT64
  }
  argDescriptor {
    name: "cLast"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "o"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "forgetBias"
  }
  argDescriptor {
    name: "clippingCellValue"
  }
  argDescriptor {
    name: "W"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wcf"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "xt"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wci"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "lstmCell"
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wc"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "ht"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "ct_1"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "peephole"
    argType: INT64
  }
  argDescriptor {
    name: "ht_1"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "ct"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "forgetBias"
  }
  argDescriptor {
    name: "clippingCellValue"
  }
  argDescriptor {
    name: "Wp"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "projection"
    argType: INT64
  }
  argDescriptor {
    name: "clippingProjValue"
  }
  argDescriptor {
    name: "xt"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "lstmLayer"
  argDescriptor {
    name: "directionMode"
    argType: INT64
  }
  argDescriptor {
    name: "outAct"
    argType: INT64
  }
  argDescriptor {
    name: "dataFormat"
    argType: INT64
  }
  argDescriptor {
    name: "cellAct"
    argType: INT64
  }
  argDescriptor {
    name: "gateAct"
    argType: INT64
  }
}
opList {
  name: "lstmLayer_bp"
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdhL"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "cI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdb"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdsL"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWr"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "cellClip"
  }
  argDescriptor {
    name: "cellAct"
    argType: INT64
  }
  argDescriptor {
    name: "dLdWx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdcL"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "directionMode"
    argType: INT64
  }
  argDescriptor {
    name: "dataFormat"
    argType: INT64
  }
  argDescriptor {
    name: "dLdcI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "outAct"
    argType: INT64
  }
  argDescriptor {
    name: "seqLen"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdhI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wp"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wr"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gateAct"
    argType: INT64
  }
}
opList {
  name: "lstmLayerCell"
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "cI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "outAct"
    argType: INT64
  }
  argDescriptor {
    name: "cellClip"
  }
  argDescriptor {
    name: "cellAct"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wp"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wr"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gateAct"
    argType: INT64
  }
}
opList {
  name: "lstmLayerCellBp"
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "cI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdcI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdb"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWp"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWr"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "outAct"
    argType: INT64
  }
  argDescriptor {
    name: "cellClip"
  }
  argDescriptor {
    name: "cellAct"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdWx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdhI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "Wp"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wr"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gateAct"
    argType: INT64
  }
}
opList {
  name: "sru"
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "w"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "c0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sru_bp"
  argDescriptor {
    name: "inGradCt"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "c"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "inGradH"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "w"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradInit"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "c0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sru_bi"
  argDescriptor {
    name: "ct"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "w"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "ht"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "c0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sru_bi_bp"
  argDescriptor {
    name: "ct"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradB"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "inGradC0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "w"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradW"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "inGradHt"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradC0"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "c0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "mask"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "sruCell"
  argDescriptor {
    name: "ct"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "w"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "xt"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "ht"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "ct_1"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "static_bidirectional_rnn"
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "\t"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h0FW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "WhFW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "maxTimeStep"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h0BW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "WhBW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hBWFinal"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bFW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hFWFinal"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "bBW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "WxFW"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "WxBW"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "static_rnn"
  argDescriptor {
    name: "Wx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "Wh"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "2)"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h0"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "h"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "maxTimeStep"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "hFinal"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "relu_layer"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "w"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "softmax"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "softmax_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "xw_plus_b"
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "b->isEmpty())"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "xw_plus_b_bp"
  argDescriptor {
    name: "dLdz"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dLdb"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dLdz->isEmpty())"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "Assert"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "bincount"
  argDescriptor {
    name: "result"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "max"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "minLength"
    argType: INT64
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "INPUT_VARIABLE(1);"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "INPUT_VARIABLE(2);"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "maxLength"
    argType: INT64
  }
}
opList {
  name: "broadcast_dynamic_shape"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "check_numerics"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "message"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "compare_and_bitpack"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "confusion_matrix"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "labels"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "expose"
}
opList {
  name: "Enter"
}
opList {
  name: "enter"
}
opList {
  name: "fake_quant_with_min_max_vars"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "min"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "max"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numBits"
    argType: INT64
  }
}
opList {
  name: "fake_quant_with_min_max_args"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "min"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "max"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numBits"
    argType: INT64
  }
}
opList {
  name: "fake_quant_with_min_max_vars_per_channel"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "min"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "max"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numBits"
    argType: INT64
  }
}
opList {
  name: "fake_quant_with_min_max_args_per_channel"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "min"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "max"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numBits"
    argType: INT64
  }
}
opList {
  name: "in_top_k"
  argDescriptor {
    name: "result"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "k"
    argType: INT64
  }
  argDescriptor {
    name: "predictions"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "target"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "listdiff"
  argDescriptor {
    name: "output1"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "output2"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "keep"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "non_max_suppression"
  argDescriptor {
    name: "boxes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "scoreThreshold"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "//"
    argType: INT64
  }
  argDescriptor {
    name: "overlayThreshold"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "scales"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "maxOutputSize"
    argType: INT64
  }
}
opList {
  name: "non_max_suppression_v3"
  argDescriptor {
    name: "boxes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "scoreThreshold"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "//"
    argType: INT64
  }
  argDescriptor {
    name: "overlayThreshold"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "scales"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "maxOutputSize"
    argType: INT64
  }
}
opList {
  name: "non_max_suppression_overlaps"
  argDescriptor {
    name: "boxes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "//"
    argType: INT64
  }
  argDescriptor {
    name: "scales"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "maxOutputSize"
    argType: INT64
  }
}
opList {
  name: "normalize_moments"
  argDescriptor {
    name: "means"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "resVariances"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "counts"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "variances"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shift.assign(T_ARG(0));"
  }
  argDescriptor {
    name: "resMeans"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "nth_element"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reverse"
    argType: INT64
  }
  argDescriptor {
    name: "n"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "onehot"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "depth"
    argType: INT64
  }
  argDescriptor {
    name: "axis"
    argType: INT64
  }
  argDescriptor {
    name: "off"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "on"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rint"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "roll"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shiftsI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shift"
    argType: INT64
  }
  argDescriptor {
    name: "axesI"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axis"
    argType: INT64
  }
}
opList {
  name: "segment_max"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_max_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outIndices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_mean"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_mean_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outIndices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_min"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_min_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outIndices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_prod"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_prod_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outIndices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_sum"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "segment_sum_bp"
}
opList {
  name: "sequence_mask"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "maxInd"
    argType: INT64
  }
  argDescriptor {
    name: "maxlen"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "square"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "stop_gradient"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "out"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "StopGradient"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "out"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "top_k"
  argDescriptor {
    name: "indices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "k"
    argType: INT64
  }
}
opList {
  name: "unique"
  argDescriptor {
    name: "indices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "unique_with_counts"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "counts"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "values"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "unsorted_segment_max"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numOfClasses"
    argType: INT64
  }
}
opList {
  name: "unsorted_segment_max_bp"
}
opList {
  name: "unsorted_segment_mean"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numOfClasses"
    argType: INT64
  }
}
opList {
  name: "unsorted_segment_mean_bp"
}
opList {
  name: "unsorted_segment_min"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numOfClasses"
    argType: INT64
  }
}
opList {
  name: "unsorted_segment_min_bp"
}
opList {
  name: "unsorted_segment_prod"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numOfClasses"
    argType: INT64
  }
}
opList {
  name: "unsorted_segment_prod_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numOfClasses"
    argType: INT64
  }
  argDescriptor {
    name: "eps"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "unsorted_segment_sqrt_n"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numOfClasses"
    argType: INT64
  }
}
opList {
  name: "unsorted_segment_sqrt_n_bp"
}
opList {
  name: "unsorted_segment_sum"
  argDescriptor {
    name: "segmentedOutput"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "idxSegments"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numOfClasses"
    argType: INT64
  }
}
opList {
  name: "unsorted_segment_sum_bp"
}
opList {
  name: "weighted_cross_entropy_with_logits"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "weights"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "targets"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "zero_fraction"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "random_bernoulli"
}
opList {
  name: "dropout"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reduceShape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "seed"
    argType: INT64
  }
}
opList {
  name: "dropout_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reduceShape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "seed"
    argType: INT64
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "alpha_dropout_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reduceShape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "seed"
    argType: INT64
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "random_exponential"
  argDescriptor {
    name: "lambda"
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "random_gamma"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "shape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "seed"
    argType: INT64
  }
  argDescriptor {
    name: "alpha"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "beta"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "get_seed"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "random_multinomial"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "inputSamples"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "random_normal"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "T_ARG(1));"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "randomnormal"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "T_ARG(1));"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "random_poisson"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "lambda"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "seed"
    argType: INT64
  }
}
opList {
  name: "random_crop"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "seed"
    argType: INT64
  }
}
opList {
  name: "random_shuffle"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "set_seed"
  argDescriptor {
    name: "seed"
    argType: INT64
  }
}
opList {
  name: "randomuniform"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "min"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "max"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dtype"
    argType: INT64
  }
}
opList {
  name: "argamax"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "argamin"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "argmax"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "argmin"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "norm"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axisVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "*output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_mean"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_mean_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_stdev"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_stdev_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_variance"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_variance_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_dot_bp"
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradY"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_logsumexp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axisVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_max"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_max_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_min"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_min_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_norm1"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_norm1_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_norm2"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_norm2_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_norm_max"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_norm_max_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_prod"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_prod_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_sqnorm"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_sqnorm_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reduce_sum"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reduce_sum_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axesVector"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "broadcast_to"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shape"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "evaluate_reduction_shape"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "axis"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "inputShape"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "expand_dims"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "flatten"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "order"
    argType: INT64
  }
}
opList {
  name: "order"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "permute"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "rank"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reshape"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reshapeas"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "reshape_as"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "shape_of"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "shape"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "shapes_of"
}
opList {
  name: "shape_n"
}
opList {
  name: "size"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "size_at"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "squeeze"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "_a"
    argType: INT64
  }
}
opList {
  name: "tile_to_shape"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tile_to_shape_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "transpose"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "split_string"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "delim"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "create"
  argDescriptor {
    name: "OUTPUT_VARIABLE(0)->nullify();"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "fill"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "shapeArray"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "fill_as"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "s"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output->assign(INT_ARG(0));"
    argType: INT64
  }
}
opList {
  name: "filllike"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "s"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output->assign(INT_ARG(0));"
    argType: INT64
  }
}
opList {
  name: "fill_like"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "s"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output->assign(INT_ARG(0));"
    argType: INT64
  }
}
opList {
  name: "lin_space"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "ones_as"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "range"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "strided_slice"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "stridedslice"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "strided_slice_bp"
  argDescriptor {
    name: "v_begin"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "v_stride"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "args.emplace_back(INT_ARG(e));"
    argType: INT64
  }
  argDescriptor {
    name: "begin_mask"
    argType: INT64
  }
  argDescriptor {
    name: "ellipsis_mask"
    argType: INT64
  }
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "end_mask"
    argType: INT64
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shrink_axis_mask"
    argType: INT64
  }
  argDescriptor {
    name: "v_end"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "new_axis_mask"
    argType: INT64
  }
}
opList {
  name: "zeros_as"
  argDescriptor {
    name: "out"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "zeroslike"
  argDescriptor {
    name: "out"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "zeros_like"
  argDescriptor {
    name: "out"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "noop"
}
opList {
  name: "testcustom"
}
opList {
  name: "testop2i2o"
  argDescriptor {
    name: "yO"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "xO"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "TestOp2i2o"
  argDescriptor {
    name: "yO"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "xO"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "y"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "testreduction"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "test_output_reshape"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "test_scalar"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "firas_sparse"
  argDescriptor {
    name: "x"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "batch_to_space"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "crop"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "blockSize"
    argType: INT64
  }
}
opList {
  name: "batch_to_space_nd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "blockShape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "crop"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "clipbyavgnorm"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "clipbyavgnorm_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "clipNorm"
  }
}
opList {
  name: "clip_by_global_norm"
  argDescriptor {
    name: "outputs[inputs.size()]"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "inputs[i]"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outputs[i]"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "clipNorm"
  }
}
opList {
  name: "clipbynorm"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "clipbynorm_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "clipNorm"
  }
}
opList {
  name: "clipbyvalue"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ClipByValue"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "concat"
  argDescriptor {
    name: "empty\");"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "ParallelConcat"
  argDescriptor {
    name: "empty\");"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "concat_v2"
  argDescriptor {
    name: "empty\");"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "concatv2"
  argDescriptor {
    name: "empty\");"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "concat_bp"
  argDescriptor {
    name: "axis"
    argType: INT64
  }
}
opList {
  name: "cumprod"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cumprod_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "exclusive"
    argType: INT64
  }
  argDescriptor {
    name: "dims[e]"
    argType: INT64
  }
  argDescriptor {
    name: "axis"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reverse"
    argType: INT64
  }
  argDescriptor {
    name: "OUTPUT_VARIABLE(1)->assign(1.0f);"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "cumsum"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "exclusive"
    argType: INT64
  }
  argDescriptor {
    name: "reverse"
    argType: INT64
  }
}
opList {
  name: "cumsum_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "exclusive"
    argType: INT64
  }
  argDescriptor {
    name: "dims[e]"
    argType: INT64
  }
  argDescriptor {
    name: "axis"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reverse"
    argType: INT64
  }
  argDescriptor {
    name: "gradOut"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "depth_to_space"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNHWC"
    argType: INT64
  }
  argDescriptor {
    name: "block_size"
    argType: INT64
  }
}
opList {
  name: "dynamic_partition"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outputList[o]"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "numPartition"
    argType: INT64
  }
}
opList {
  name: "dynamic_partition_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradOutList[e]"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outputList[0]"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "outputList[1]"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "numPartition"
    argType: INT64
  }
}
opList {
  name: "dynamic_stitch"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "data"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "index"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "Floor"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "floor"
  argDescriptor {
    name: "z"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "first"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "gather"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "gather_nd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "hashcode"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "histogram"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "numBins"
    argType: INT64
  }
}
opList {
  name: "histogram_fixed_width"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "nbins"
    argType: INT64
  }
  argDescriptor {
    name: "range"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "invert_permutation"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "InvertPermutation"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "mergeadd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mergesum"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "add_n"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "addn"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "accumulaten"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "accumulate_n"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mergeadd_bp"
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outArrs[i]"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mergeavg"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mergeavg_bp"
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outArrs[i]"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mergemax"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "MergeMax"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mergemax_bp"
  argDescriptor {
    name: "inArrs[i]"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outArrs[i]"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mergemaxindex"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "MergeMaxIndex"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "mirror_pad"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "mode"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "paddings"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "pad"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "mode"
    argType: INT64
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "paddings"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "INPUT_VARIABLE(2)->dataType());"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "padValue.assign(INPUT_VARIABLE(2)->e(0));"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "padValue);"
    argType: INT64
  }
  argDescriptor {
    name: "INT_ARG(0));"
    argType: INT64
  }
}
opList {
  name: "parallel_stack"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "repeat"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reverse"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reverse_v2"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reverse_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "eps"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axis"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "reverse_sequence"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "seqDim"
    argType: INT64
  }
  argDescriptor {
    name: "seqLengths"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "batchDim"
    argType: INT64
  }
}
opList {
  name: "scatter_add"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ScatterAdd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_div"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ScatterDiv"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_max"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ScatterMax"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_min"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ScatterMin"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_mul"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ScatterMul"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_nd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "shape"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_nd_add"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_nd_sub"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_nd_update"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_sub"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ScatterSub"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_upd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ScatterUpdate"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "indices"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatter_update"
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "operand"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "scatterupdate"
  argDescriptor {
    name: "updates"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "operand"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "slice"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "e"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "slice_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "e"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "epsNext"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "space_to_batch"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "padding"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "blockSize"
    argType: INT64
  }
}
opList {
  name: "space_to_batch_nd"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "padding"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "blockShape"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "space_to_depth"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "isNHWC"
    argType: INT64
  }
  argDescriptor {
    name: "block_size"
    argType: INT64
  }
}
opList {
  name: "split"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "b"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "num_splits"
    argType: INT64
  }
}
opList {
  name: "split_v"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "_a"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "sizes"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axis"
    argType: INT64
  }
}
opList {
  name: "stack"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "pack"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "Pack"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "standardize"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axis"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "standardize_bp"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "eps"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "axis"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tear"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tile"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "reps_vector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "tile_bp"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradO"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradI"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "reps_vector"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "unstack"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "unpack"
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dim"
    argType: INT64
  }
}
opList {
  name: "cell_contains"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "corner"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "width"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dimension"
    argType: INT64
  }
  argDescriptor {
    name: "point"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "barnes_edge_forces"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "rowP"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "valP"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "dataP"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "colP"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "N"
    argType: INT64
  }
}
opList {
  name: "barnes_gains"
  argDescriptor {
    name: "epsilon"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradX"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "barnes_symmetrized"
  argDescriptor {
    name: "outputVals"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "rowP"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "valP"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outputRows"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "colP"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "outputCols"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "N"
    argType: INT64
  }
}
opList {
  name: "ada_delta_updater"
  argDescriptor {
    name: "stateMsg"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "stateMsdx"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "initStateMsdx"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateMsg"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ada_grad_updater"
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initState"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "stateH"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "ada_max_updater"
  argDescriptor {
    name: "stateM"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateM"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "stateU"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateU"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "adam_updater"
  argDescriptor {
    name: "stateM"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateM"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "stateU"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateU"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "ams_grad_updater"
  argDescriptor {
    name: "stateM"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateM"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "stateV"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "stateH"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateV"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "initStateH"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "nadam_updater"
  argDescriptor {
    name: "stateM"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateM"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "stateV"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initStateV"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "nesterovs_updater"
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "stateV"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initState"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "rms_prop_updater"
  argDescriptor {
    name: "gradient"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "update"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "initState"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "stateG"
    argType: OUTPUT_TENSOR
  }
}
opList {
  name: "sgd_updater"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "print_affinity"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
}
opList {
  name: "print_variable"
  argDescriptor {
    name: "output"
    argType: OUTPUT_TENSOR
  }
  argDescriptor {
    name: "input"
    argType: INPUT_TENSOR
  }
  argDescriptor {
    name: "message"
    argType: INPUT_TENSOR
  }
}
